#+TITLE: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el

* User configuration
Setting some basic user variables.
#+begin_src emacs-lisp
(setq user-full-name "Olivier Lischer"
      user-mail-address "olivier.lischer@liolin.ch")
#+end_src
* Package management
I use straight.el for my package management with use-package integration. Install it and configure it!
#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)

#+end_src

* UI Configuration
** Dashboard
I like to have a pretty start screen.
#+begin_src emacs-lisp
  (use-package dashboard
    :custom
    (dashboard-items '((recents . 5)
                       (bookmarks . 5)
                       (projects . 5)
                       (agenda . 5)))
    (dashboard-set-heading-icons t)
    (dashboard-set-file-icons t)
    (dashboard-startup-banner "~/Pictures/Logo/liolin_black_exempted.png")
    ;;(initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
    :config
    (dashboard-setup-startup-hook)) 
#+end_src
** UI configuration
I like a minimal GUI. Disable tool and menu bar.
#+begin_src  emacs-lisp
  (tool-bar-mode -1)    ;; Disable the tool bar
  (menu-bar-mode -1)    ;; Disable the menu bar
  (column-number-mode)  ;; Enables the column number in the mode line
  (set-fringe-mode 10)  ;; Set the size of the fringe
  (blink-cursor-mode 0) ;; Disable blinking cursor
  
  (setq display-line-numbers-type 'relative)  ;; The line numbering should be realtive to current position
  (global-display-line-numbers-mode t)  ;; Enables line numbering in all modes
  ;; Disable line numbering in the following modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** Font configuration
Some packages looks a lot better with some fancy icons.
#+begin_src emacs-lisp
(use-package all-the-icons)  ;; Install all-the-icons, used by many other modes
#+end_src

** Theme
I like the default doom theme
#+begin_src emacs-lisp
;; Install and load theme
(use-package doom-themes
  :init (load-theme 'doom-one t))

;; Install doom-modeline for pretty modeline
(use-package doom-modeline
  :init (doom-modeline-mode 1))
#+end_src

** Text
With colored brackets is it easier to find the counter parts.
#+begin_src emacs-lisp
;; All brackets pair have diffrent colors
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

* Editing
** Global Key bindings
** Evil keybindng
For editing text I like the vim key bindings more than the Emacs one. Install evil and evil-collection for a whole vim feeling insiede Emacs.
#+begin_src emacs-lisp
  ;; Install evil-mode and enable it
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil) 
    :config
    (evil-mode 1)
    (evil-set-initial-state 'messages-buffer-mode 'normal)  ;; Set default state in message-buffer
    (evil-set-initial-state 'dashboard-mode 'normal))       ;; Set default state in dashboard-buffer
  
  ;; Install evil keybindings for many modes
  (use-package evil-collection
    :after evil
    :ensure t
    :config
    (evil-collection-init))
  
  (use-package evil-surround
    :ensure t
    :config
    (global-evil-surround-mode 1))
  
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)  ;; Bind ESC to switch to normal mode
  (define-key evil-motion-state-map "go" 'xref-find-definitions-other-window)
#+end_src

** which-key
Sometimes you onle know the prefix for a command. Maybe a list could help.
#+begin_src emacs-lisp
;; Shows which key you could press next, to complete a key stroke
(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 1))
#+end_src

** undo-tree
#+begin_src emacs-lisp
  (use-package undo-tree
    :config
    (global-undo-tree-mode))
#+end_src
* Completion framework
** ivy
I don't like the default completion framework from emacs. Replace it with ivy and counsel.
#+begin_src emacs-lisp
;; Install the completion framework ivy and replace the default emacs functions with it.
(use-package ivy
  :diminish
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)	
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))
  
;; ivy enhanced version of common emacs functions
(use-package counsel
  :bind (("M-x" . counsel-M-x)
         ("C-x b" . counsel-ibuffer)
         ("C-x C-f" . counsel-find-file)
         :map minibuffer-local-map
         ("C-r" . 'counsel-minibuffer-history)))

(use-package ivy-rich
  :init
  (ivy-rich-mode 1))
#+end_src

** company
Company is a gread package for completing text. Especially with lsp.
#+begin_src emacs-lisp
  (use-package company
    ;:after lsp-mode                  ;; load it after lsp mode
    :hook
    (prog-mode . company-mode)       ;; enable in all prog-mode buffers
    :bind (:map company-active-map
                ("<tab>" . company-complete-selection))
    (:map prog-mode-map
          ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

  ;; Use icons with company
  (use-package company-box
    :hook (company-mode . company-box-mode))
#+end_src
* Helpful
Helpful is a great helpsystem and a replacement for the default one. It has code examples and a lot more.
#+begin_src emacs-lisp
;; Replace the default helpsystem with a better one with code examples etc.
(use-package helpful
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))
#+end_src

* File Management
Don't litter my filesystem with backup files.
#+begin_src emacs-lisp
(setq make-backup-files nil)  ;; Disable backup files
#+end_src
* Programming
** Project management
Projectile is a great package for navigating between project related buffers and files.
#+begin_src emacs-lisp
;; Install projectile and bind it.
(use-package projectile
  :diminish projectile-mode
  :config (projectile-mode)
  :custom ((projectile-completion-system 'ivy))
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init
  (when (file-directory-p "~/code")
    (setq projectile-project-search-path '("~/code")))
  (setq projectile-switch-project-action #'projectile-dired))

;; Enables ivy-completion for projectile mode
(use-package counsel-projectile
  :config (counsel-projectile-mode))
#+end_src

** Version controll
When working with git from inside emacs magit is a must have.
#+begin_src emacs-lisp
;; Install the emacs interface for git
(use-package magit
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
#+end_src

** Language server protocol
Today a lot of languages has gread lsp support. With lsp-mode and company you have nearly an full IDE.
#+begin_src emacs-lisp
  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :init
    (setq lsp-keymap-prefix "C-c l")
    :config
    (lsp-enable-which-key-integration t))

  ;; Enables some lsp optional improvments
  (use-package lsp-ui 
    :commands lsp-ui-mode
    :hook (lsp-mode . lsp-ui-mode)
    :custom (lsp-ui-doc-position 'bottom))

  (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
  (use-package lsp-treemacs :commands lsp-treemacs-errors-list)
#+end_src

** Diagnostics
Show me the syntax errors and other problems in a buffer.
#+begin_src emacs-lisp
  (use-package flycheck)
#+end_src
** Debugging
Sometimes you have to debug your code. 
#+begin_src emacs-lisp
  ;;(use-package dap-mode)
#+end_src
** Snippets
#+begin_src emacs-lisp
  (use-package yasnippet
    :hook (prog-mode . yas-minor-mode))
  
  (use-package yasnippet-snippets
    :after yasnippet)
#+end_src
** Rust
My favourite language. I use rust-analyzer as lsp in the background.
#+begin_src emacs-lisp
  ;; Enables the rust language in the buffer
  (use-package rustic
    :bind (:map rustic-mode-map
                ("C-c C-c j" . hs-show-block)
                ("C-c C-c J" . hs-show-all)
                ("C-c C-c k" . hs-hide-block)
                ("C-c C-c K" . hs-hide-all)
                ("C-c C-c i" . lsp-ui-imenu)
                ("C-c C-c l" . flycheck-list-errors)
                ("C-c C-c a" . lsp-execute-code-action)
                ("C-c C-c r" . lsp-rename)
                ("C-c C-c q" . lsp-workspace-restart)
                ("C-c C-c Q" . lsp-workspace-shutdown)
                ("C-c C-c s" . lsp-rust-analyzer-status))
    :config
    (setq rustic-format-on-save t)
    :hook
    (rustic-mode . lsp-deferred)
    (rustic-mode . hs-minor-mode))

#+end_src

** Haskell
My Windows manager is XMonad. So Haskell is a must have for editing.
#+begin_src emacs-lisp
  (use-package haskell-mode)  ;; Adds support for the Haskell language
  (use-package lsp-haskell
    :custom
    (lsp-haskell-server-path "/home/liolin/.ghcup/bin/haskell-language-server-wrapper")
    :hook
    (haskell-mode . lsp)
    (haskell-literate-mode . lsp)
    :init
    (setenv "/usr/local/bin:/usr/bin:/home/liolin/.ghcup/bin"))
#+end_src
** Web (Used at HSR - WED1)
During a course at my bachelor studies we need to write some Web based applications. Add a minimal setup for writing html, css and JavaScript.
#+begin_src emacs-lisp
  (use-package html5-schema) ;; Use the current html5 standard schema in nxml-mode
  (use-package skewer-mode)
  (use-package impatient-mode)

  (use-package nxml
    :bind
    (:map nxml-mode-map
          ("<tab>" . company-indent-or-complete-common))
    :hook
    (nxml-mode . company-mode)       ;; enable in nxml-mode buffers
    (nxml-mode . lsp-deferred))

  (use-package css-mode
    :hook
    (css-mode . lsp-deferred))

  (use-package js2-mode
    :mode "\\.js\\'"
    :hook
    (js2-mode . lsp-deferred))
#+end_src
** Yaml
#+begin_src emacs-lisp
(use-package yaml-mode)
#+end_src
* Org mode
** Basic setup
Setup custom functions and set the location of my org files.
#+begin_src emacs-lisp
  (defun liomacs/org-mode-setup() 
    "Configure org mode according to my wishes"
    (org-indent-mode)                  ;; Indent text according to the outline
    (variable-pitch-mode 1)            ;; Set the font to variable size
    (visual-line-mode 1))              ;; Do visual line breaks if needed

  (defun liomacs/org-git-update()
    (start-process-shell-command "git-org-update" "git-org-update-buffer" (concat "/home/liolin/bin/git-org-update " (buffer-file-name))))

  (defun liomacs/org-save-after-hook()
    (liomacs/org-babel-tangle-config)
    (liomacs/org-git-update))

  (defun liomacs/org-agenda-finalize-hook()
    (evil-normal-state))

  ;; Setup the org files and directories
  (setq org-directory "~/org/")
#+end_src

** Org font setup
Normal text blocks should have an non mono spaced font. But code, tables and co should be mono spaced.
#+begin_src emacs-lisp
(defun liomacs/org-font-setup ()
  ;; Set org mode faces for heading levels
  (dolist (face '((org-level-1 . 1.2)
		  (org-level-2 . 1.1)
		  (org-level-3 . 1.05)
		  (org-level-4 . 1.0)
		  (org-level-5 . 1.1)
		  (org-level-6 . 1.1)
		  (org-level-7 . 1.1)
		  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

  ;; Ensure that anything that should be fixed-pitch in Org files appears that way
  (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))
#+end_src

** Load org mode
Load org mode and setup the hooks.
#+begin_src emacs-lisp
  (use-package org
    :straight
    (org
     :files (:defaults "contrib/lisp/*.el"))
    :hook
    (org-mode . liomacs/org-mode-setup)        ;; Configure org mode according to my wishes
    (org-agenda-finalize . liomacs/org-agenda-finalize-hook)
    :bind
    ("C-c a" . org-agenda-list)
    ("C-c l" . org-store-link)
    :config
    (setq org-ellipsis " ▾")                   ;; Set charachter to show if a header is collapsed
    (liomacs/org-font-setup)                   ;; Setup my font config
    :custom
    (org-todo-keywords '((sequence "TODO" "WORKING" "WAIT" "|" "DONE" "KILL"))) ;; Set org mode keywords
    (org-log-done 'time)
    (org-modules '(org-habit))
    (org-startup-folded t))                    ;; All Headers folded by default
  
  ;;(use-package org-plus-contrib)
#+end_src

** Org export
#+begin_src emacs-lisp
  (use-package ox-hugo
    :after ox)
#+end_src
** Org babel
#+begin_src emacs-lisp
  (use-package org
    :init
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (haskell . t)
       (ditaa . t)
       (plantuml . t)
       (dot . t)
       (python . t)))
    :custom
    (org-plantuml-jar-path (expand-file-name "/usr/share/java/plantuml/plantuml.jar"))
    (org-ditaa-jar-path "/usr/share/java/ditaa/ditaa-0.11.jar")
    (org-confirm-babel-evaluate nil))
#+end_src

#+begin_src emacs-lisp
  (defvar liomacs/config-file "~/code/liomacs/Emacs.org")
  (defun liomacs/org-babel-tangle-config()
    "Tangle config file to the file when it is saved"
    (when (string-equal (buffer-file-name)
                        (expand-file-name liomacs/config-file))
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'liomacs/org-save-after-hook)))

#+end_src

#+begin_src emacs-lisp
#+end_src
** Org capture
#+begin_src emacs-lisp
  (use-package doct)          ;; Package to simplify writing org capture templates
  (use-package org-cliplink)  ;; Package to copy link from clipboard in to the template
  
  (setq liomacs/org-capture-todo-file (concat org-directory "Agenda/GTD.org"))    ;; File location for my todos
  (setq liomacs/org-capture-contacts-file (concat org-directory "contacts.org"))  ;; File location for my contacts
  (global-set-key (kbd "C-c X") 'org-capture)  ;; Bind org-capture
  
  ;; Setup all my org captures templates
  (setq org-capture-templates
        (doct `((,(format "%s\tPersonal todo" (all-the-icons-octicon "checklist" :face 'all-the-icons-green :v-adjust 0.01))
                 :keys "t"
                 :file liomacs/org-capture-todo-file
                 :prepend t
                 :headline "Inbox"
                 :type entry
                 :template ("* TODO %?"
                            "%i %a")
                 )
                (,(format "%s\tBookmark" (all-the-icons-octicon "checklist" :face 'all-the-icons-green :v-adjust 0.01))
                 :keys "b"
                 :file liomacs/org-capture-todo-file
                 :prepend t
                 :headline "Bookmark"
                 :type entry
                 :template ("* %? :%{i-type}:\n:PROPERTIES:\n:CREATED: %U\n:END:\n\n")
                 :i-type "web"
                 )
                (,(format "%s\tUniversity" (all-the-icons-faicon "graduation-cap" :face 'all-the-icons-purple :v-adjust 0.01))
                 :keys "u"
                 :file liomacs/org-capture-todo-file
                 :headline "University"
                 :prepend t
                 :type entry
                 :children ((,(format "%s\tTest" (all-the-icons-material "timer" :face 'all-the-icons-red :v-adjust 0.01))
                             :keys "t"
                             :template ("* TODO [#C] %? :uni:tests:"
                                        "SCHEDULED: %^{Test date:}T"
                                        "%i %a"))
                            (,(format "%s\tAssignment" (all-the-icons-material "library_books" :face 'all-the-icons-orange :v-adjust 0.01))
                             :keys "a"
                             :template ("* TODO [#B] %? :uni:assignments:"
                                        "DEADLINE: %^{Due date:}T"
                                        "%i %a"))
                            (,(format "%s\tMiscellaneous task" (all-the-icons-faicon "list" :face 'all-the-icons-yellow :v-adjust 0.01))
                             :keys "u"
                             :template ("* TODO [#C] %? :uni:"
                                        "%i %a"))
                            )
                 )
                (,(format "%s\tEmail" (all-the-icons-faicon "envelope" :face 'all-the-icons-blue :v-adjust 0.01))
                 :keys "e"
                 :file liomacs/org-capture-todo-file
                 :prepend t
                 :headline "Inbox"
                 :type entry
                 :template ("* TODO %? :email:"
                            "%i %a")
                 )
                (,(format "%s\tInteresting" (all-the-icons-faicon "eye" :face 'all-the-icons-lcyan :v-adjust 0.01))
                 :keys "i"
                 :file liomacs/org-capture-todo-file
                 :prepend t
                 :headline "Interesting"
                 :type entry
                 :template ("* [ ] %{desc}%? :%{i-type}:"
                            "%i %a")
                 :children ((,(format "%s\tBookmark" (all-the-icons-faicon "globe" :face 'all-the-icons-green :v-adjust 0.01))
                             :keys "w"
                             :headline "Bookmark"
                             :desc "%(org-cliplink-capture) "
                             :i-type "web"
                             )
                            (,(format "%s\tArticle" (all-the-icons-octicon "file-text" :face 'all-the-icons-yellow :v-adjust 0.01))
                             :keys "a"
                             :desc ""
                             :i-type "read:reaserch"
                             )
                            (,(format "%s\tInformation" (all-the-icons-faicon "info-circle" :face 'all-the-icons-blue :v-adjust 0.01))
                             :keys "i"
                             :desc ""
                             :i-type "read:info"
                             )
                            (,(format "%s\tIdea" (all-the-icons-material "bubble_chart" :face 'all-the-icons-silver :v-adjust 0.01))
                             :keys "I"
                             :desc ""
                             :i-type "idea"
                             ))
                 )
                (,(format "%s\tTasks" (all-the-icons-octicon "inbox" :face 'all-the-icons-yellow :v-adjust 0.01))
                 :keys "k"
                 :file liomacs/org-capture-todo-file
                 :prepend t
                 :headline "Tasks"
                 :type entry
                 :template ("* TODO %? %^G%{extra}"
                            "%i")
                 :children ((,(format "%s\tGeneral Task" (all-the-icons-octicon "inbox" :face 'all-the-icons-yellow :v-adjust 0.01))
                             :keys "k"
                             :extra ""
                             )
                            (,(format "%s\tTask with deadline" (all-the-icons-material "timer" :face 'all-the-icons-orange :v-adjust -0.1))
                             :keys "d"
                             :extra "\nDEADLINE: %^{Deadline:}t"
                             )
                            (,(format "%s\tScheduled Task" (all-the-icons-octicon "calendar" :face 'all-the-icons-orange :v-adjust 0.01))
                             :keys "s"
                             :extra "\nSCHEDULED: %^{Start time:}t"
                             )
                            )
                 )
                (,(format "%s\tProject" (all-the-icons-octicon "repo" :face 'all-the-icons-silver :v-adjust 0.01))
                 :keys "p"
                 :type entry
                 :prepend t
                 :template ("* %{time-or-todo} %? %^G"
                            "%i"
                            "%a")
                 :children (("Project todo"
                             :keys "t"
                             :prepend nil
                             :time-or-todo "TODO"
                             :heading "Tasks"
                             :file liomacs/org-capture-todo-file)
                            ("Project note"
                             :keys "n"
                             :time-or-todo "%U"
                             :heading "Notes"
                             :file liomacs/org-capture-todo-file)
                            ("Project changelog"
                             :keys "c"
                             :time-or-todo "%U"
                             :heading "Unreleased"
                             :file liomacs/org-capture-todo-file))
                 ))))
  
#+end_src

** Org roam
#+begin_src emacs-lisp
  (use-package org-roam
    :ensure t
    :hook
    (after-init . org-roam-mode)
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory "~/roam/")
    (org-roam-dailies-directory "daily/")
    ;; (org-roam-capture-templates '(("d" "default" plain (function org-roam--capture-get-point)
    ;;                                "%?"
    ;;                                :file-name "%<%Y%m%d%H%M%S>-${slug}"
    ;;                                :head "#+title: ${title}\n#+SETUPFILE: ~/roam/setup.conf\n\n- tags :: %?\n- source :: \n"
    ;;                                :unnarrowed t)))
    ;; (org-roam-dailies-capture-templates
    ;;  '(("j" "default" entry
    ;;     #'org-roam-capture--get-point
    ;;     "* %?"
    ;;     :file-name "daily/%<%Y-%m-%d>"
    ;;     :head "#+title: %<%Y-%m-%d>\n#+SETUPFILE: ~/roam/setup.conf\n#+roam_tags: private\n\n")))
  
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n g" . org-roam-graph)
           ("C-c n i" . org-roam-node-insert)
           ("C-c n c" . org-roam-capture)
           ("C-c n j" . org-roam-dailies-capture-today))
    :config
    (org-roam-setup)
    ;; (require 'org-roam-protocol)
    ;; (defvar hugo-base-dir "~/code/dg")
    ;; (defun file-path-to-md-file-name (path)
    ;;   (let ((file-name (car (last (split-string path "/")))))
    ;;     (concat (car (split-string file-name "\\.")) ".md")))
  
    ;; (defun liomacs/org-roam-to-hugo-md ()
    ;;   (interactive)
    ;;   (setq user-full-name "Olivier Lischer")
  
    ;;   (let ((files (mapcan
    ;;                 (lambda (file) file)
    ;;                 (org-roam-db-query
    ;;                  [:select [files:file]
    ;;                           :from files
    ;;                           :left :outer :join tags :on (= files:file tags:file)
    ;;                           :where (or (is tags:tags nil)
    ;;                                      (and
    ;;                                       (not-like tags:tags '%private%)
    ;;                                       (not-like tags:tags '%draft%)))]))))
    ;;     (mapc
    ;;      (lambda (f)
    ;;        (with-temp-buffer
    ;;          (message "working on %s" f)
    ;;          (insert-file-contents f)
    ;;          (goto-char (point-min))
    ;;          (insert
    ;;           (format "#+HUGO_BASE_DIR: %s\n#+EXPORT_FILE_NAME: %s\n"
    ;;                   hugo-base-dir
    ;;                   (file-path-to-md-file-name f)))
    ;;          (org-hugo-export-to-md)))
    ;;      files)))
  
    ;; (defun liomacs/org-roam-not-finished-projects ()
    ;;   (mapcan
    ;;    (lambda (file) file)
    ;;    (org-roam-db-query
    ;;     [:select [links:source]
    ;;              :from files
    ;;              :left :outer :join titles :on (= files:file titles:file)
    ;;              :left :outer :join links :on (= files:file links:dest)
    ;;              :left :outer :join tags :on (= links:source tags:file)
    ;;              :where (and (= titles:title "Project")
    ;;                          (or (not-like tags:tags '%finished%)
    ;;                              (is tags:tags nil)))]))))
    )
#+end_src

Install org-roam-ui for a interactive web fronted to org-roam.
#+begin_src emacs-lisp
  (use-package org-roam-ui
    :straight
    (:host github :repo "org-roam/org-roam-ui" :branch "main" :files ("*.el" "out"))
    :after org-roam
    :hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))
#+end_src
** Org agenda
#+begin_src emacs-lisp
  (use-package org
    :custom
    (org-agenda-files (append 
     '("~/org/Agenda/GTD.org"
       "~/org/Agenda/Events.org"
       "~/org/Agenda/Habits.org"
       "~/org/contacts.org")))
    (org-agenda-skip-deadline-prewarning-if-scheduled t)
    :config
    (set-face-attribute 'org-headline-done nil :strike-through t)
    (evil-set-initial-state 'org-agenda-mode 'normal)
    (evil-collection-define-key 'normal 'org-agenda-mode-map
      "l" 'org-agenda-later
      "e" 'org-agenda-earlier
      "d" 'org-agenda-day-view
      "w" 'org-agenda-week-view
      "t" 'org-agenda-todo
      "gr" 'org-agenda-redo))
#+end_src

** Org transclusion
#+begin_src emacs-lisp
  (use-package org-transclusion
    :straight (:host github :repo "nobiot/org-transclusion"
                     :branch "main")
    :bind
    (:map org-roam-mode-map
          ("C-c r" . org-transclusion-mode)))
#+end_src
** Org journal
#+begin_src emacs-lisp
  (use-package org-journal
    :custom
    (org-journal-dir "~/org/journal/"))
#+end_src
** Org drill
#+begin_src emacs-lisp
  (use-package org-drill)
#+end_src
** Org tree slide 
#+begin_src emacs-lisp
  (use-package org-tree-slide
    :hook ((org-tree-slide-play . liomacs/presentation-setup)
           (org-tree-slide-stop . liomacs/presentation-end))
    :bind ("C-c t" . org-tree-slide-mode)
    :custom
    (org-image-actual-with nil))

  (defun liomacs/presentation-setup ()
    "Setup the org mode buffer for presentation"
    (setq text-scale-mode-amount 3)  ;; The scale factor for the fonts
    (org-display-inline-images)      ;; Display images in the org buffer
    (blink-cursor-mode 0)            ;; Disable the blinking cursor
    (text-scale-mode 1))             ;; Make fonts bigger

  (defun liomacs/presentation-end ()
    "Revert changes made by limacs/presentation-setup"
    (text-scale-mode 0)              ;; Disable font scaling
    (blink-cursor-mode 1))           ;; Enable the blinking cursor
#+end_src
** Org temp 
#+begin_src emacs-lisp
;; Enables expandsion
(require 'org-tempo)

;; Adds src block expansion with emacs-lisp as language
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))

#+end_src


#+begin_src emacs-lisp
;; Pretty header symbols
(use-package org-bullets
  :after org
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src

#+begin_src emacs-lisp
  (defun liomacs/org-mode-visual-fill ()
    "Set up visual fill mode in org mode"
    (setq visual-fill-column-width 150       ;; Set with of the text area
          visual-fill-column-center-text t)  ;; Center the text area
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . liomacs/org-mode-visual-fill))
#+end_src

** Org mode keybings
#+begin_src emacs-lisp
  ;;(define-key org-mode-map (kbd "C-RET") 'org-insert-item)
  (define-key org-mode-map [remap org-insert-heading-respect-content] 'org-insert-item)
#+end_src
** Org mime
#+begin_src emacs-lisp
  (defun liomacs/org-mime-setup-css ()
    (org-mime-change-element-style
     "body" (format "font-family: %s"
                    "Arial")))
  (use-package org-mime
    :hook
    (org-mime-html . liomacs/org-mime-setup-css))
#+end_src
** Org plot
#+begin_src emacs-lisp
  (use-package gnuplot)
#+end_src
** Org ql
#+begin_src emacs-lisp
  (use-package org-ql)
#+end_src
** Org tables
#+begin_src emacs-lisp
  (defun org-table-goto-beginning ()
    (interactive)
    (goto-char (org-table-begin)))
  
  (defun org-table-goto-end ()
    (interactive)
    (goto-char (org-table-end)))
  
  
  (use-package org
    :bind (:map org-mode-map
                ("C-c t b" . org-table-goto-beginning)
                ("C-c t e" . org-table-goto-end)))
#+end_src
* TODO Tab bar mode
#+begin_src emacs-lisp
  (tab-bar-mode)
#+end_src
* Clipboard
#+begin_src emacs-lisp
(setq x-select-enable-clipboard t)
#+end_src
* E-Mail
I use mu4e for my mail mangement.
#+begin_src emacs-lisp
  (use-package mu4e
    :load-path "/usr/share/emacs/site-lisp/mu4e/"
    :hook
    (message-send . mml-secure-message-sign-pgpmime)
    :config
    (setq mu4e-contexts
          (list
           ;; liolin account
           (make-mu4e-context
            :name "liolin"
            :match-func
            (lambda (msg)
              (when msg
                (string-prefix-p "/liolin" (mu4e-message-field msg :maildir))))
            :vars '((user-mail-address . "olivier.lischer@liolin.ch")
                    (user-full-name    . "Olivier Lischer")
                    (mu4e-drafts-folder . "/liolin/Drafts")
                    (mu4e-sent-folder . "/liolin/Sent")
                    (mu4e-trash-folder . "/liolin/Trash")
                    (mu4e-refile-folder .
                     (lambda (msg)
                       (cond
                        ((mu4e-message-contact-field-matches msg :from
                                                             "apple")
                         "/liolin/Archive/bill/apple")
                        ((mu4e-message-contact-field-matches msg :from
                                                             "bitpanda")
                         "/liolin/Archive/bill/bitpanda")
                        ((mu4e-message-contact-field-matches msg :from
                                                             "brack")
                         "/liolin/Archive/bill/brack")
                        ((mu4e-message-contact-field-matches msg :from
                                                             "exlibris")
                         "/liolin/Archive/bill/exlibris")
  
                        ((or (mu4e-message-contact-field-matches msg :from
                                                                 "galaxus")
                             (mu4e-message-contact-field-matches msg :from
                                                                 "digitec"))
                         "/liolin/Archive/bill/galaxus")
                        ((mu4e-message-contact-field-matches msg :from
                                                             "mootes")
                         "/liolin/Archive/bill/mootes")
                        ((mu4e-message-contact-field-matches msg :from
                                                             "musicnotes")
                         "/liolin/Archive/bill/musicnotes")
                        ((or (mu4e-message-contact-field-matches msg :from
                                                                 "sbb")
                             (mu4e-message-contact-field-matches msg :from
                                                                 "swisspass"))
                         "/liolin/Archive/bill/sbb")
                        ((mu4e-message-contact-field-matches msg :from
                                                             "swiss paracord")
                         "/liolinArchive/bill/swissparacord")
  
                        ((mu4e-message-contact-field-matches msg :to "olivier.lischer@liolin.ch")
                         "/liolin/Archive/private")
  
                        ((mu4e-message-contact-field-matches msg :from
                                                             "olivier.lischer")
                         "/liolin/Archive/Sent")
                        ;; everything else goes to /archive
                        (t  "/liolin/Archive"))))))
  
           (make-mu4e-context
            :name "gmail"
            :match-func
            (lambda (msg)
              (when msg
                (string-prefix-p "/gmail" (mu4e-message-field msg :maildir))))
            :vars '((user-mail-address . "olivier.lischer.blon@gmail.com")
                    (user-full-name    . "Olivier Lischer")
                    (mu4e-drafts-folder . "/gmail/[Gmail]/Entw&APw-rfe")
                    (mu4e-sent-folder . "/gmail/[Gmail]/Gesendet")
                    (mu4e-trash-folder . "/gmail/[Gmail]/Papierkorb")
                    (mu4e-refile-folder . "/gmail/[Gmail]/Archive")))))
  
    :custom
    (mu4e-org-link-query-in-headers-mode t)
    (mu4e-change-filenames-when-moving t)
    (mu4e-update-interval (* 5 60))
    (mu4e-get-mail-command "mbsync -a")
    (mu4e-maildir "~/.mail")
  
  
    (mu4e-maildir-shortcuts
     '(("/liolin/Inbox"  . ?i)
       ("/liolin/Sent"    . ?s)
       ("/liolin/Trash"   . ?t)))
    :config
    (add-to-list 'mu4e-view-actions '("Browser" . mu4e-action-view-in-browser) t))
  
  (use-package mu4e-alert
    :hook
    (after-init . mu4e-alert-enable-notifications)
    :config
    (mu4e-alert-set-default-style 'libnotify))
  
  (use-package smtpmail
    :custom
    (smtpmail-smtp-server "asmtp.mail.hostpoint.ch")
    (smtpmail-smtp-service 587)
    (smtpmail-stream-type 'starttls)
    (message-send-mail-function 'smtpmail-send-it))
#+end_src
* Document view
** PDF
#+begin_src emacs-lisp
  (use-package pdf-tools
    :hook
    (pdf-tools-enabled . pdf-view-midnight-minor-mode)
    :config
    (pdf-tools-install t))
  
  
#+end_src
* pass
#+begin_src emacs-lisp
  (use-package pass)
#+end_src
* RSS / Atom Feed
#+begin_src emacs-lisp
  (use-package elfeed
    :bind (("C-x w" . elfeed))
    :custom
    (elfeed-feeds '("https://hnrss.org/newest"
                    "http://www.reddit.com/r/emacs/.rss"
                    "http://www.reddit.com/r/rust/.rss"
                    "https://events.ccc.de/feed/"
                    "https://xenodium.com/rss.xml"))) 
#+end_src
* hledger
#+begin_src emacs-lisp
  (use-package hledger-mode
    :custom
    (hledger-jfile "/home/liolin/finance/2021.journal")
    :config
    (add-to-list 'auto-mode-alist '("\\.journal\\'" . hledger-mode)))
#+end_src
* Emacs Server
#+begin_src emacs-lisp
  (server-start)
#+end_src


